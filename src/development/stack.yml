# jonas-thelemann.de
# https://jonas-thelemann.de/
# jonas-thelemann
# https://github.com/dargmuesli/jonas-thelemann/
---
secrets:
  creal_s3_access-key-id:
  # The DJ website's AWS access key id.
    file: ./secrets/creal/s3_access-key-id.secret
  creal_s3_secret-access-key:
  # The DJ website's AWS access key.
    file: ./secrets/creal/s3_secret-access-key.secret
  creal_postgraphile_connection:
  # The cReal GraphQL API's database URI.
    file: ./secrets/creal_postgraphile/connection.secret
  creal_postgraphile_owner-connection:
  # The cReal GraphQL API's database owner URI.
    file: ./secrets/creal_postgraphile/owner-connection.secret
  creal_sqitch-target:
  # The DJ website's Sqitch target.
    file: ./secrets/creal/sqitch-target.secret
  creal_strapi_admin-jwt-secret:
  # The DJ website's CMS administrator JWT secret.
    file: ./secrets/creal_strapi/admin-jwt.secret
  creal_strapi_api-token-salt:
  # The DJ website's CMS administrator admin token salt.
    file: ./secrets/creal_strapi/api-token-salt.secret
  creal_strapi_app-keys:
  # The DJ website's CMS session secrets.
    file: ./secrets/creal_strapi/app-keys.secret
  creal_strapi_jwt-secret:
  # The DJ website's CMS JWT secret.
    file: ./secrets/creal_strapi/jwt.secret
  creal_strapi_transfer-token-salt:
  # The DJ website's CMS transfer token salt.
    file: ./secrets/creal_strapi/transfer-token-salt.secret
  hedgedoc_db_url:
  # The markdown collaboration tool's database url.
    file: ./secrets/hedgedoc/db_url.secret
  hedgedoc_session-secret:
  # The markdown collaboration tool's session secret.
    file: ./secrets/hedgedoc/session-secret.secret
  jobber_aliases:
  # The job scheduler's SMTP client mail alias.
    file: ./secrets/jobber/aliases.secret
  jobber_aws-bucket:
  # The job scheduler's AWS bucket name.
    file: ./secrets/jobber/aws-bucket.secret
  jobber_aws-configuration:
  # The job scheduler's AWS configuration.
    file: ./secrets/jobber/aws-configuration.secret
  jobber_aws-credentials:
  # The job scheduler's AWS credentials.
    file: ./secrets/jobber/aws-credentials.secret
  jobber_msmtprc:
  # The job scheduler's SMTP client configuration.
    file: ./secrets/jobber/msmtprc.secret
  jonas-thelemann_nodemailer-transporter:
  # The email service's SMTP configuration.
    file: ./secrets/jonas-thelemann/nodemailer-transporter.secret
  jonas-thelemann_turnstile-key:
  # The captcha provider's application key.
    file: ./secrets/jonas-thelemann/turnstile-key.secret
  nextcloud_admin-password:
  # The cloud admin user's password.
    file: ./secrets/nextcloud/admin-password.secret
  nextcloud_admin-user:
  # The cloud admin user's name.
    file: ./secrets/nextcloud/admin-user.secret
  portainer_admin-password:
  # The container manager's password for the user `admin`.
    file: ./secrets/portainer/admin-password.secret
  postgres_password:
  # The database default user's password.
    file: ./secrets/postgres/password.secret
  postgres_role_creal_postgraphile_password:
  # The `creal_postgraphile` database role's password.
    file: ./secrets/postgres/role_creal_postgraphile_password.secret
  postgres_role_trapparty_postgraphile_password:
  # The `trapparty_postgraphile` database role's password.
    file: ./secrets/postgres/role_trapparty_postgraphile_password.secret
  postgres_user:
  # The database default user's name.
    file: ./secrets/postgres/user.secret
  trapparty_postgraphile_connection:
  # The TrapParty GraphQL API's database URI.
    file: ./secrets/trapparty_postgraphile/connection.secret
  trapparty_postgraphile_owner-connection:
  # The TrapParty GraphQL API's database owner URI.
    file: ./secrets/trapparty_postgraphile/owner-connection.secret
  trapparty_sqitch-target:
  # The party website's Sqitch target.
    file: ./secrets/trapparty/sqitch-target.secret
services:
  1generator:
  # You can access this subproject at [1generator.localhost](https://1generator.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.1generator.middlewares=redirectscheme
      - traefik.http.routers.1generator.rule=Host(`1generator.${STACK_DOMAIN}`)
      - traefik.http.routers.1generator_secure.rule=Host(`1generator.${STACK_DOMAIN}`)
      - traefik.http.routers.1generator_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.1generator.loadbalancer.server.port=80
    image: dargmuesli/1generator:1.0.1
  adminer:
  # You can access the database's frontend at [adminer.localhost](https://adminer.localhost/).
  # This information is required for login:
  #
  # |          |                     |
  # | -------- | ------------------- |
  # | System   | PostgreSQL          |
  # | Server   | postgres            |
  # | Username | [postgres_user]     |
  # | Password | [postgres_password] |
  # | Database |                     |
  #
  # Values in square brackets are [Docker secrets](https://docs.docker.com/engine/swarm/secrets/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.middlewares=redirectscheme
      - traefik.http.routers.adminer.rule=Host(`adminer.${STACK_DOMAIN}`)
      - traefik.http.routers.adminer_secure.rule=Host(`adminer.${STACK_DOMAIN}`)
      - traefik.http.routers.adminer_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    image: adminer:5.3.0-standalone
    volumes:
    - ../production/configurations/adminer/adminer.css:/var/www/html/adminer.css:ro
  creal:
  # You can access the DJ website at [creal.localhost](https://creal.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.creal.entryPoints=web
      - traefik.http.routers.creal.middlewares=redirectscheme
      - traefik.http.routers.creal.rule=Host(`creal.${STACK_DOMAIN}`)
      - traefik.http.routers.creal.service=creal #DARGSTACK-REMOVE
      - traefik.http.routers.creal_secure.entryPoints=web-secure
      - traefik.http.routers.creal_secure.rule=Host(`creal.${STACK_DOMAIN}`)
      - traefik.http.routers.creal_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.routers.creal_secure.service=creal #DARGSTACK-REMOVE
      - traefik.http.routers.creal_secure_nuxt.entryPoints=nuxt #DARGSTACK-REMOVE
      - traefik.http.routers.creal_secure_nuxt.service=creal_secure_nuxt #DARGSTACK-REMOVE
      - traefik.http.routers.creal_secure_nuxt.rule=Host(`creal.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
      - traefik.http.services.creal.loadbalancer.server.port=3000
      - traefik.http.services.creal_secure_nuxt.loadbalancer.server.port=24678 #DARGSTACK-REMOVE
    environment:
      NUXT_PUBLIC_CREAL_S3_BUCKET: ${CREAL_S3_BUCKET}
      NUXT_PUBLIC_CREAL_S3_ENDPOINT: ${CREAL_S3_ENDPOINT}
      NUXT_PUBLIC_CREAL_S3_REGION: ${CREAL_S3_REGION}
      NUXT_PUBLIC_GTAG_ID: ${GTAG_ID}
      NUXT_PUBLIC_I18N_BASE_URL: https://creal.${STACK_DOMAIN}
      NUXT_PUBLIC_SITE_URL: https://creal.${STACK_DOMAIN}
    image: dargmuesli/creal:dev
    secrets:
    - source: creal_s3_access-key-id
      target: /run/environment-variables/NUXT_PRIVATE_CREAL_S3_ACCESS_KEY_ID
    - source: creal_s3_secret-access-key
      target: /run/environment-variables/NUXT_PRIVATE_CREAL_S3_SECRET_ACCESS_KEY
    - creal_sqitch-target
    - postgres_role_creal_postgraphile_password
    user: node:node
    volumes:
    - ${PNPM_STORE_DIR}:/srv/.pnpm-store/
    - ../../../creal/:/srv/app/
  creal_postgraphile:
  # You can access cReal's GraphQL API for the PostgreSQL database at [creal_postgraphile.localhost](https://creal_postgraphile.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.creal_postgraphile.middlewares=redirectscheme
      - traefik.http.routers.creal_postgraphile.rule=Host(`creal-postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.creal_postgraphile_secure.middlewares=header_cors #DARGSTACK-REMOVE
      - traefik.http.routers.creal_postgraphile_secure.rule=Host(`creal-postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.creal_postgraphile_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.creal_postgraphile.loadbalancer.server.port=5000
    image: graphile/postgraphile:4.14.1
    secrets:
    - creal_postgraphile_connection
    - creal_postgraphile_owner-connection
    volumes:
    - ../production/configurations/creal_postgraphile/.postgraphilerc.js:/postgraphile/.postgraphilerc.js:ro
  creal_strapi:
  # You can access the DJ website's CMS at [creal_strapi.localhost](https://creal_strapi.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.creal_strapi.middlewares=redirectscheme
      - traefik.http.routers.creal_strapi.rule=Host(`creal-strapi.${STACK_DOMAIN}`)
      - traefik.http.routers.creal_strapi_secure.rule=Host(`creal-strapi.${STACK_DOMAIN}`)
      - traefik.http.routers.creal_strapi_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.creal_strapi.loadbalancer.server.port=1337
    environment:
      ADMIN_JWT_SECRET_FILE: /run/secrets/creal_strapi_admin-jwt-secret
      API_TOKEN_SALT_SECRET_FILE: /run/secrets/creal_strapi_api-token-salt
      APP_KEYS_SECRET_FILE: /run/secrets/creal_strapi_app-keys
      DATABASE_HOST: postgres
      DATABASE_NAME: creal_strapi
      DATABASE_PORT: 5432
      JWT_SECRET_FILE: /run/secrets/creal_strapi_jwt-secret
      POSTGRES_PASSWORD_SECRET_FILE: /run/secrets/postgres_password
      POSTGRES_USER_SECRET_FILE: /run/secrets/postgres_user
      TRANSFER_TOKEN_SALT_SECRET_FILE: /run/secrets/creal_strapi_transfer-token-salt
    image: dargmuesli/creal_strapi:dev
    secrets:
    - creal_strapi_admin-jwt-secret
    - creal_strapi_api-token-salt
    - creal_strapi_app-keys
    - creal_strapi_jwt-secret
    - creal_strapi_transfer-token-salt
    - postgres_password
    - postgres_user
    user: node:node
    volumes:
    - ${PNPM_STORE_DIR}:/srv/.pnpm-store/
    - ../../../creal_strapi/:/srv/app/
  hedgedoc:
  # You can access the markdown collaboration tool at [hedgedoc.localhost](https://hedgedoc.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.hedgedoc.middlewares=redirectscheme
      - traefik.http.routers.hedgedoc.rule=Host(`hedgedoc.${STACK_DOMAIN}`)
      - traefik.http.routers.hedgedoc_secure.rule=Host(`hedgedoc.${STACK_DOMAIN}`)
      - traefik.http.routers.hedgedoc_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.hedgedoc.loadbalancer.server.port=3000
    environment:
      CMD_DOMAIN: hedgedoc.${STACK_DOMAIN}
      CMD_PROTOCOL_USESSL: "true"
      CMD_URL_ADDPORT: "false"
    image: quay.io/hedgedoc/hedgedoc:1.10.3-alpine
    secrets:
    - source: hedgedoc_db_url
      target: dbURL
    - source: hedgedoc_session-secret
      target: sessionsecret
  jobber:
  # You cannot access the jobber via a web interface.
    environment:
      AWS_SHARED_CREDENTIALS_FILE: /run/secrets/jobber_aws-credentials
    image: ghcr.io/dargmuesli/jobber-aws-msmtp:1.3.0
    secrets:
    - source: jobber_aliases
      target: /etc/aliases
    - jobber_aws-bucket
    - jobber_aws-credentials
    - source: jobber_aws-configuration
      target: /home/jobberuser/.aws/config
    - source: jobber_msmtprc
      target: /etc/msmtprc
    volumes:
      - ../production/backups/postgres/:/backups/
      - ./configurations/jobber/.jobber:/home/jobberuser/.jobber:ro
  jonas-thelemann:
  # You can access the main project at [localhost](https://localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.jonas-thelemann.entryPoints=web
      - traefik.http.routers.jonas-thelemann.middlewares=redirectscheme
      - traefik.http.routers.jonas-thelemann.rule=Host(`backend.jonas-thelemann.de`) && PathPrefix(`/api`)
      - traefik.http.routers.jonas-thelemann.service=jonas-thelemann #DARGSTACK-REMOVE
      - traefik.http.routers.jonas-thelemann_secure.entryPoints=web-secure
      - traefik.http.routers.jonas-thelemann_secure.middlewares=header_cors #DARGSTACK-REMOVE
      - traefik.http.routers.jonas-thelemann_secure.rule=Host(`backend.jonas-thelemann.de`) && PathPrefix(`/api`)
      - traefik.http.routers.jonas-thelemann_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.routers.jonas-thelemann_secure.service=jonas-thelemann #DARGSTACK-REMOVE
      - traefik.http.routers.jonas-thelemann_secure_nuxt.entryPoints=nuxt #DARGSTACK-REMOVE
      - traefik.http.routers.jonas-thelemann_secure_nuxt.service=jonas-thelemann_secure_nuxt #DARGSTACK-REMOVE
      - traefik.http.routers.jonas-thelemann_secure_nuxt.rule=Host(`backend.jonas-thelemann.de`) && PathPrefix(`/api`) #DARGSTACK-REMOVE
      - traefik.http.services.jonas-thelemann.loadbalancer.server.port=3000
      - traefik.http.services.jonas-thelemann_secure_nuxt.loadbalancer.server.port=24678 #DARGSTACK-REMOVE
    environment:
      NUXT_PUBLIC_GTAG_ID: ${GTAG_ID}
      NUXT_PUBLIC_I18N_BASE_URL: https://${STACK_DOMAIN}
      NUXT_PUBLIC_SITE_URL: https://${STACK_DOMAIN}
      NUXT_PUBLIC_TURNSTILE_SITE_KEY: ${TURNSTILE_SITE_KEY}
      NUXT_TURNSTILE_SECRET_KEY: ${TURNSTILE_SECRET_KEY} # TODO: move to file (https://github.com/nuxt-modules/turnstile/pull/298)
    image: dargmuesli/jonas-thelemann:dev
    user: node:node
    secrets:
      - jonas-thelemann_nodemailer-transporter
      - jonas-thelemann_turnstile-key
    volumes:
    - ${PNPM_STORE_DIR}:/srv/.pnpm-store/
    - ../../../jonas-thelemann/:/srv/app/
  minio: #DARGSTACK-REMOVE
  # You can access the s3 console at [minio.localhost](https://minio.localhost/).
  # You can access the s3 api service at [s3.localhost](https://s3.localhost/) if you want to access via cli from outside the stack.
    entrypoint: /patched-entrypoint.sh #DARGSTACK-REMOVE
    command: server /data --console-address ":9001" #DARGSTACK-REMOVE
    deploy: #DARGSTACK-REMOVE
      labels: #DARGSTACK-REMOVE
        - traefik.enable=true #DARGSTACK-REMOVE
        # Minio Console
        - traefik.http.routers.minio.middlewares=redirectscheme #DARGSTACK-REMOVE
        - traefik.http.routers.minio.rule=Host(`minio.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
        - traefik.http.routers.minio.service=minio #DARGSTACK-REMOVE
        - traefik.http.routers.minio_secure.rule=Host(`minio.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
        - traefik.http.routers.minio_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
        - traefik.http.routers.minio_secure.service=minio #DARGSTACK-REMOVE
        - traefik.http.services.minio.loadbalancer.server.port=9001 #DARGSTACK-REMOVE
        - traefik.http.services.minio.loadbalancer.passhostheader=true #DARGSTACK-REMOVE
        # Minio itself
        - traefik.http.routers.s3.middlewares=redirectscheme #DARGSTACK-REMOVE
        - traefik.http.routers.s3.rule=Host(`s3.${STACK_DOMAIN}`) || Host(`creal-audio.s3.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
        - traefik.http.routers.s3.service=s3 #DARGSTACK-REMOVE
        - traefik.http.routers.s3_secure.rule=Host(`s3.${STACK_DOMAIN}`) || Host(`creal-audio.s3.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
        - traefik.http.routers.s3_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
        - traefik.http.routers.s3_secure.service=s3 #DARGSTACK-REMOVE
        - traefik.http.services.s3.loadbalancer.server.port=9000 #DARGSTACK-REMOVE
        - traefik.http.services.s3.loadbalancer.passhostheader=true #DARGSTACK-REMOVE
    image: minio/minio #DARGSTACK-REMOVE
    volumes: #DARGSTACK-REMOVE
      - minio_data:/data #DARGSTACK-REMOVE
      - ./configurations/minio/entrypoint.sh:/patched-entrypoint.sh #DARGSTACK-REMOVE
    environment: #DARGSTACK-REMOVE
      MINIO_ROOT_PASSWORD: s3password #DARGSTACK-REMOVE
      MINIO_ROOT_USER: s3user #DARGSTACK-REMOVE
  nextcloud:
  # You can access nextcloud via `nextcloud_nginx`.
    env_file: ../production/configurations/nextcloud/nextcloud.env
    environment:
      REDIS_HOST: redis
    image: nextcloud:31.0.8-fpm-alpine
    secrets:
    - nextcloud_admin-password
    - nextcloud_admin-user
    - postgres_password
    - postgres_user
    volumes:
    - nextcloud_data:/var/www/html/
  nextcloud_cron:
  # You can access nextcloud via `nextcloud_nginx`.
    entrypoint: /cron.sh
    env_file: ../production/configurations/nextcloud/nextcloud.env
    environment:
      REDIS_HOST: redis
    image: nextcloud:31.0.8-fpm-alpine
    secrets:
    - nextcloud_admin-password
    - nextcloud_admin-user
    - postgres_password
    - postgres_user
    volumes:
    - nextcloud_data:/var/www/html/
  nextcloud_nginx:
  # You can access nexcloud's frontend at [nextcloud.localhost](https://nextcloud.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_dav.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_dav.redirectregex.regex=https://([^/]+)/.well-known/(?:card|cal)dav
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_dav.redirectregex.replacement=https://$${1}/remote.php/dav
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_well-known.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_well-known.redirectregex.regex=https://([^/]+)/.well-known/(.*)
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_well-known.redirectregex.replacement=https://$${1}/index.php/.well-known/$${2}
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_calendar.redirectregex.regex=.*
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_calendar.redirectregex.replacement=https://nextcloud.${STACK_DOMAIN}/apps/calendar/
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_contacts.redirectregex.regex=.*
      - traefik.http.middlewares.nextcloud_nginx_secure_redirectregex_contacts.redirectregex.replacement=https://nextcloud.${STACK_DOMAIN}/apps/contacts/
      - traefik.http.routers.nextcloud_nginx.middlewares=redirectscheme
      - traefik.http.routers.nextcloud_nginx.rule=Host(`nextcloud.${STACK_DOMAIN}`)
      - traefik.http.routers.nextcloud_nginx_secure.middlewares=nextcloud_nginx_secure_redirectregex_dav,nextcloud_nginx_secure_redirectregex_well-known #DARGSTACK-REMOVE
      - traefik.http.routers.nextcloud_nginx_secure.rule=Host(`nextcloud.${STACK_DOMAIN}`)
      - traefik.http.routers.nextcloud_nginx_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.routers.nextcloud_nginx_secure_calendar.middlewares=nextcloud_nginx_secure_redirectregex_calendar
      - traefik.http.routers.nextcloud_nginx_secure_calendar.rule=Host(`calendar.${STACK_DOMAIN}`)
      - traefik.http.routers.nextcloud_nginx_secure_calendar.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.routers.nextcloud_nginx_secure_contacts.middlewares=nextcloud_nginx_secure_redirectregex_contacts
      - traefik.http.routers.nextcloud_nginx_secure_contacts.rule=Host(`contacts.${STACK_DOMAIN}`)
      - traefik.http.routers.nextcloud_nginx_secure_contacts.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.nextcloud.loadbalancer.server.port=80
    image: nginx:1.29.1-alpine
    volumes:
    - ../production/configurations/nextcloud_nginx/nginx.conf:/etc/nginx/nginx.conf
    - nextcloud_data:/var/www/html/
  portainer:
  # You can access the container manager's frontend at [portainer.localhost](https://portainer.localhost/).
    command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify --admin-password-file '/run/secrets/portainer_admin-password'
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.middlewares=redirectscheme
      - traefik.http.routers.portainer.rule=Host(`portainer.${STACK_DOMAIN}`)
      - traefik.http.routers.portainer_secure.rule=Host(`portainer.${STACK_DOMAIN}`)
      - traefik.http.routers.portainer_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      mode: replicated
      placement:
        constraints:
        - node.role == manager
      replicas: 1
    image: portainer/portainer-ce:2.33.1-alpine
    secrets:
    - portainer_admin-password
    volumes:
    - portainer_data:/data
  portainer-agent:
  # You can access the container manager agent via `portainer`.
    deploy:
      mode: global
      placement:
        constraints:
        - node.platform.os == linux
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer-agent
    image: portainer/agent:2.33.1
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /var/lib/docker/volumes:/var/lib/docker/volumes
  postgres:
  # You can access the database via `adminer`.
    environment:
      POSTGRES_ADDITIONAL_DBS: creal creal_strapi hedgedoc nextcloud trapparty
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER_FILE: /run/secrets/postgres_user
    image: postgres:17.6-alpine
    secrets:
    - postgres_password
    - postgres_user
    volumes:
    - /run/:/run/ #DARGSTACK-REMOVE
    - postgres_data:/var/lib/postgresql/data/
    - ../production/configurations/postgres/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/:ro
  redis:
  # You cannot access the key-value store via a web interface.
    image: redis:8.2.1-alpine
    volumes:
    - redis_data:/data
  thelounge:
  # You can access the web IRC client's dashboard at [thelounge.localhost](https://traefik.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.thelounge.middlewares=redirectscheme
      - traefik.http.routers.thelounge.rule=Host(`thelounge.${STACK_DOMAIN}`)
      - traefik.http.routers.thelounge_secure.rule=Host(`thelounge.${STACK_DOMAIN}`)
      - traefik.http.routers.thelounge_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.thelounge.loadbalancer.server.port=9000
    image: thelounge/thelounge:4.3.0-alpine
    volumes:
    - thelounge_data:/var/opt/thelounge
  traefik:
  # You can access the reverse proxy's dashboard at [traefik.localhost](https://traefik.localhost/).
  # Traefik enables HTTPS for all services and acts as a load-balancer too.
    command:
    - --api=true
    - --entryPoints.web.address=:80
    - --entryPoints.web-secure.address=:443
    - --entryPoints.nuxt.address=:24678 #DARGSTACK-REMOVE
    - --providers.swarm=true
    - --providers.swarm.endpoint=unix:///var/run/docker.sock
    - --providers.swarm.exposedByDefault=false
    - --providers.file.filename=/dynamic.yml #DARGSTACK-REMOVE
    - --providers.file.watch=true #DARGSTACK-REMOVE
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.middlewares.header_cors.headers.accessControlAllowHeaders=authorization,content-type
      - traefik.http.middlewares.header_cors.headers.accessControlAllowOriginList=*
      - traefik.http.middlewares.redirectscheme.redirectscheme.scheme=https
      - traefik.http.routers.traefik.middlewares=redirectscheme
      - traefik.http.routers.traefik.rule=Host(`traefik.${STACK_DOMAIN}`)
      - traefik.http.routers.traefik_secure.rule=Host(`traefik.${STACK_DOMAIN}`)
      - traefik.http.routers.traefik_secure.service=api@internal
      - traefik.http.routers.traefik_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      mode: global
      placement:
        constraints:
        - node.role == manager
    image: traefik:v3.5.0
    ports:
    - mode: host
      protocol: tcp
      published: 80
      target: 80
    - mode: host
      protocol: tcp
      published: 443
      target: 443
    - mode: host #DARGSTACK-REMOVE
      protocol: tcp #DARGSTACK-REMOVE
      published: 24678 #DARGSTACK-REMOVE
      target: 24678 #DARGSTACK-REMOVE
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./certificates/:/etc/traefik/acme/
    - ./configurations/traefik/dynamic.yml:/dynamic.yml:ro #DARGSTACK-REMOVE
  trapparty:
  # You can access TrapParty's website at [trapparty.localhost](https://trapparty.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.trapparty.entryPoints=web
      - traefik.http.routers.trapparty.middlewares=redirectscheme
      - traefik.http.routers.trapparty.rule=Host(`trapparty.${STACK_DOMAIN}`)
      - traefik.http.routers.trapparty.service=trapparty #DARGSTACK-REMOVE
      - traefik.http.routers.trapparty_secure.entryPoints=web-secure
      - traefik.http.routers.trapparty_secure.rule=Host(`trapparty.${STACK_DOMAIN}`)
      - traefik.http.routers.trapparty_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.routers.trapparty_secure.service=trapparty #DARGSTACK-REMOVE
      - traefik.http.routers.trapparty_secure_nuxt.entryPoints=nuxt #DARGSTACK-REMOVE
      - traefik.http.routers.trapparty_secure_nuxt.service=trapparty_secure_nuxt #DARGSTACK-REMOVE
      - traefik.http.routers.trapparty_secure_nuxt.rule=Host(`trapparty.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
      - traefik.http.services.trapparty.loadbalancer.server.port=3000
      - traefik.http.services.trapparty_secure_nuxt.loadbalancer.server.port=24678 #DARGSTACK-REMOVE
    environment:
      NUXT_PUBLIC_GTAG_ID: ${GTAG_ID}
      NUXT_PUBLIC_I18N_BASE_URL: https://trapparty.${STACK_DOMAIN}
      NUXT_PUBLIC_SITE_URL: https://trapparty.${STACK_DOMAIN}
    image: dargmuesli/trapparty:dev
    secrets:
    - trapparty_sqitch-target
    - postgres_role_trapparty_postgraphile_password
    user: node:node
    volumes:
    - ${PNPM_STORE_DIR}:/srv/.pnpm-store/
    - ../../../trapparty/:/srv/app/
  trapparty_postgraphile:
  # You can access TrapParty's GraphQL API for the PostgreSQL database at [postgraphile.localhost](https://postgraphile.localhost/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.trapparty_postgraphile.middlewares=redirectscheme
      - traefik.http.routers.trapparty_postgraphile.rule=Host(`trapparty-postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.trapparty_postgraphile_secure.middlewares=header_cors #DARGSTACK-REMOVE
      - traefik.http.routers.trapparty_postgraphile_secure.rule=Host(`trapparty-postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.trapparty_postgraphile_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.trapparty_postgraphile.loadbalancer.server.port=5000
    image: graphile/postgraphile:4.14.1
    secrets:
    - trapparty_postgraphile_connection
    - trapparty_postgraphile_owner-connection
    volumes:
    - ../production/configurations/trapparty_postgraphile/.postgraphilerc.js:/postgraphile/.postgraphilerc.js:ro
version: "3.6"
volumes:
  minio_data:
  # The s3 server's data.
    {}
  nextcloud_data:
  # The cloud's data.
    {}
  portainer_data:
  # The container manager's data.
    {}
  postgres_data:
  # The database's data.
    {}
  redis_data:
  # The key-value store's data.
    {}
  thelounge_data:
  # The IRC client's data.
    {}
